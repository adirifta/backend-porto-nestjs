name: Deploy to cPanel via FTP

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🧪 Run tests
      run: npm test

    - name: 🏗️ Build project
      run: |
        npm run build
        ls -la dist/

  deploy:
    name: 🚀 Deploy to cPanel
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: |
        npm run build
        echo "📁 Build contents:"
        ls -la dist/
        echo "📁 Root contents:"
        ls -la

    - name: 📝 Create environment file
      run: |
        cat > .env.production << EOF
        # Database Configuration
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_SYNCHRONIZE=false
        DB_LOGGING=false

        # JWT Configuration
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}

        # App Configuration
        NODE_ENV=production
        PORT=${{ secrets.APP_PORT }}

        # CORS
        CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
        EOF
        
        echo "✅ Environment file created"
        # Print first few lines untuk verifikasi (without sensitive data)
        head -n 5 .env.production

    - name: 📁 Prepare deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp -r dist/ deployment/
        cp -r node_modules/ deployment/
        cp package.json deployment/
        cp package-lock.json deployment/
        cp .env.production deployment/.env
        cp ecosystem.config.js deployment/ 2>/dev/null || echo "No ecosystem.config.js found"
        
        # Create additional cPanel specific files
        cat > deployment/.htaccess << 'EOF'
        RewriteEngine On
        RewriteRule ^(.*)$ http://localhost:${{ secrets.APP_PORT }}/$1 [P,L]
        
        # Security headers
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        
        # CORS headers
        Header always set Access-Control-Allow-Origin "${{ secrets.CORS_ORIGIN }}"
        Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
        
        # Handle preflight requests
        RewriteCond %{REQUEST_METHOD} OPTIONS
        RewriteRule ^(.*)$ $1 [R=200,L]
        EOF

        echo "📦 Deployment package structure:"
        ls -la deployment/
        echo "📁 dist contents in deployment:"
        ls -la deployment/dist/

    - name: 🚀 Deploy to cPanel via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deployment/
        server-dir: ${{ secrets.FTP_DEPLOY_PATH }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/
          **/test/
          **/src/
          **/*.md
          **/.env.example
          **/.eslintrc.js
          **/tsconfig.json
          **/nest-cli.json

    - name: 📧 Notify deployment success
      uses: actions/github-script@v6
      if: success()
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚀 Deployment Successful',
            body: `✅ **Backend successfully deployed to cPanel!**\n\n- **Branch**: ${context.ref}\n- **Commit**: ${context.sha.substring(0, 7)}\n- **Triggered by**: ${context.actor}\n- **Timestamp**: ${new Date().toISOString()}\n\n### Next Steps:\n1. Verify the application is running\n2. Check database connections\n3. Test API endpoints\n4. Monitor logs for any issues`
          })

    - name: 📧 Notify deployment failure
      uses: actions/github-script@v6
      if: failure()
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '❌ Deployment Failed',
            body: `🚨 **Deployment to cPanel failed!**\n\n- **Branch**: ${context.ref}\n- **Commit**: ${context.sha.substring(0, 7)}\n- **Triggered by**: ${context.actor}\n- **Error**: Check the GitHub Actions logs for details\n\n### Troubleshooting:\n1. Check FTP credentials\n2. Verify server directory permissions\n3. Review build logs\n4. Check environment variables`
          })