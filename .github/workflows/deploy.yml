name: Deploy to cPanel via FTP

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: 🧪 Run Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        npm list --depth=0

    - name: 🔧 Create test environment file
      run: |
        cat > .env.test << EOF
        # Test Database Configuration
        DB_HOST=localhost
        DB_PORT=3306
        DB_USERNAME=test_user
        DB_PASSWORD=test_password
        DB_NAME=portfolio_test
        DB_SYNCHRONIZE=false
        DB_LOGGING=false

        # Test JWT Configuration
        JWT_SECRET=test-jwt-secret
        JWT_EXPIRES_IN=1h
        JWT_REFRESH_SECRET=test-refresh-secret
        JWT_REFRESH_EXPIRES_IN=7d

        # App Configuration
        NODE_ENV=test
        PORT=3001

        # CORS
        CORS_ORIGIN=http://localhost:3000
        EOF
        echo "✅ Test environment file created"

    - name: 🔍 Run linting
      run: |
        echo "Running ESLint..."
        npx eslint src/ --ext .ts --fix --max-warnings=0 || echo "Linting completed with warnings"

    - name: 🏗️ Build project
      run: |
        echo "Building project..."
        npm run build
        echo "📁 Build output:"
        ls -la dist/
        echo "📄 Main file check:"
        ls -la dist/main.js || echo "Main file not found"

    - name: 🧪 Run tests
      run: |
        echo "Running tests..."
        npm test -- --passWithNoTests --verbose
      env:
        NODE_ENV: test

    - name: 📊 Test coverage
      run: |
        echo "Checking test coverage..."
        npx jest --coverage --passWithNoTests || echo "No tests found, continuing..."

  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔒 Audit dependencies
      run: |
        npm audit --audit-level moderate
        echo "Security audit completed"

    - name: 📝 Check for secrets
      run: |
        echo "Checking for potential secrets..."
        ! git log -p | grep -i "password\|secret\|key\|token" | grep "=" || echo "No obvious secrets found"

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci
        echo "Dependencies installed successfully"

    - name: 🏗️ Build project
      run: |
        npm run build
        echo "✅ Build completed"
        ls -la dist/

    - name: 📝 Create production environment file
      run: |
        cat > .env.production << 'ENVFILE'
        # Database Configuration
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_SYNCHRONIZE=false
        DB_LOGGING=false

        # JWT Configuration
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}

        # App Configuration
        NODE_ENV=production
        PORT=${{ secrets.APP_PORT }}

        # CORS
        CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
        ENVFILE
        echo "✅ Production environment file created"

    - name: 📁 Prepare deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy built files
        echo "📦 Copying built files..."
        cp -r dist/ deployment/
        
        # Copy package files
        echo "📄 Copying package files..."
        cp package.json deployment/
        cp package-lock.json deployment/
        
        # Copy environment file
        cp .env.production deployment/.env
        
        # Copy PM2 config if exists
        if [ -f "ecosystem.config.js" ]; then
          cp ecosystem.config.js deployment/
          echo "✅ PM2 config copied"
        else
          # Create basic PM2 config
          cat > deployment/ecosystem.config.js << 'PM2CONFIG'
          module.exports = {
            apps: [{
              name: 'portfolio-backend',
              script: './dist/main.js',
              instances: 1,
              exec_mode: 'fork',
              env_production: {
                NODE_ENV: 'production',
                PORT: process.env.APP_PORT || 3000
              },
              error_file: './logs/error.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true
            }]
          };
          PM2CONFIG
          echo "✅ Basic PM2 config created"
        fi
        
        # Create startup script for cPanel
        cat > deployment/start-server.sh << 'STARTUP'
        #!/bin/bash
        echo "🚀 Starting Portfolio Backend Server..."
        
        # Install dependencies if node_modules doesn't exist
        if [ ! -d "node_modules" ]; then
          echo "📦 Installing dependencies..."
          npm install --production
        fi
        
        # Create logs directory
        mkdir -p logs
        
        # Start the application
        echo "🔄 Starting application with PM2..."
        if command -v pm2 &> /dev/null; then
          pm2 start ecosystem.config.js --env production
          pm2 save
          pm2 startup
        else
          echo "❌ PM2 not found. Installing..."
          npm install -g pm2
          pm2 start ecosystem.config.js --env production
          pm2 save
          pm2 startup
        fi
        
        echo "✅ Server started successfully!"
        echo "📊 Check status with: pm2 status"
        echo "📋 Check logs with: pm2 logs portfolio-backend"
        STARTUP
        
        chmod +x deployment/start-server.sh
        
        # Create .htaccess for cPanel
        cat > deployment/.htaccess << 'HTACCESS'
        RewriteEngine On
        
        # Proxy requests to Node.js application
        RewriteRule ^(.*)$ http://localhost:${APP_PORT}/$1 [P,L]
        
        # Security headers
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
        
        # CORS headers
        Header always set Access-Control-Allow-Origin "${CORS_ORIGIN}"
        Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS"
        Header always set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
        Header always set Access-Control-Allow-Credentials "true"
        
        # Handle preflight requests
        RewriteCond %{REQUEST_METHOD} OPTIONS
        RewriteRule ^(.*)$ $1 [R=200,L]
        HTACCESS
        
        echo "📦 Deployment package contents:"
        ls -la deployment/
        echo "📁 dist contents:"
        ls -la deployment/dist/

    - name: 🚀 Deploy to cPanel via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deployment/
        server-dir: ${{ secrets.FTP_DEPLOY_PATH }}
        protocol: ftp
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/
          **/node_modules/
          **/test/
          **/src/
          **/*.md
          **/.env.example
          **/.eslintrc.js
          **/tsconfig.json
          **/nest-cli.json
          **/jest.config.js
          **/coverage/

    - name: 📧 Notify deployment success
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚀 Deployment Successful - ' + new Date().toLocaleString(),
            body: `### ✅ Backend successfully deployed to cPanel!\n\n**Details:**\n- **Branch**: ${context.ref}\n- **Commit**: ${context.sha.substring(0, 8)}\n- **Triggered by**: ${context.actor}\n- **Timestamp**: ${new Date().toISOString()}\n\n**Next Steps:**\n1. SSH into your cPanel server\n2. Navigate to deployment directory\n3. Run: chmod +x start-server.sh\n4. Run: ./start-server.sh\n5. Verify the application is running\n6. Test API endpoints\n\n**Deployment Structure:**\n- dist/ - Built application\n- package.json - Dependencies\n- ecosystem.config.js - PM2 configuration\n- start-server.sh - Startup script\n- .htaccess - Apache configuration`
          })

    - name: 📧 Notify deployment failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '❌ Deployment Failed - ' + new Date().toLocaleString(),
            body: `### 🚨 Deployment to cPanel failed!\n\n**Details:**\n- **Branch**: ${context.ref}\n- **Commit**: ${context.sha.substring(0, 8)}\n- **Triggered by**: ${context.actor}\n- **Error**: Check the GitHub Actions logs for details\n\n**Troubleshooting Steps:**\n1. Check FTP credentials in repository secrets\n2. Verify server directory exists: ${process.env.FTP_DEPLOY_PATH}\n3. Check file permissions on server\n4. Review build logs for compilation errors\n5. Verify environment variables are set correctly\n\n**Common Issues:**\n- FTP connection refused → Check FTP server and credentials\n- Build failures → Check Node.js version compatibility\n- Missing files → Verify build output\n- Permission denied → Check server directory permissions`
          })